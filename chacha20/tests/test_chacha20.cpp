extern "C"
{
#include "chacha20.h"
}

#include <gtest/gtest.h>
#include <string>
#include <vector>
#include <cstdint>
#include <algorithm>
#include <iostream>
#include <iomanip>

// Utility function to convert hex string to byte array
std::vector<uint8_t> hex_to_bytes(const std::string &hex)
{
    std::vector<uint8_t> bytes;
    for (size_t i = 0; i < hex.length(); i += 2)
    {
        std::string byteString = hex.substr(i, 2);
        uint8_t byte = static_cast<uint8_t>(std::stoi(byteString, nullptr, 16));
        bytes.push_back(byte);
    }
    return bytes;
}

TEST(ChaCha20Test, BasicTest)
{
    const std::string plaintext_hex = "4869205468697320697320612074657374";
    const std::string expected_ciphertext_hex = "1c9240e2b3f8c5b6d7f8c5b6d7f8c5b6";

    // Test vectors from RFC 7539
    std::vector<uint8_t> key = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f};
    std::vector<uint32_t> nonce = {
        0x09000000, 0x4a000000, 0x00000000};
    std::vector<uint8_t> plaintext = hex_to_bytes(plaintext_hex);
    std::vector<uint8_t> expected_ciphertext = hex_to_bytes(expected_ciphertext_hex);
    uint8_t ciphertext[plaintext.size()];

    // Initialize ChaCha20
    ChaCha20 chacha;
    chacha_new(&chacha, key.data(), reinterpret_cast<const uint32_t *>(nonce.data()), 1);
    chacha_encrypt(&chacha, plaintext.data(), ciphertext, plaintext.size());

    // // Encrypt the plaintext
    // std::vector<uint8_t> ciphertext(plaintext.size());
    // for (size_t i = 0; i < plaintext.size(); ++i)
    // {
    //     ciphertext[i] = plaintext[i] ^ chacha.key[i % 32];
    // }

    // Check if the ciphertext matches the expected ciphertext
    // EXPECT_EQ(ciphertext, expected_ciphertext);
}

TEST(ChaCha20Test, RFCExample1)
{
    std::vector<uint8_t> plaintext = {
        0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c,
        0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73,
        0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39, 0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63,
        0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f,
        0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20,
        0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73,
        0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69,
        0x74, 0x2e};
    uint8_t ciphertext[plaintext.size()];
    std::vector<uint8_t> expected_ciphertext = {
        0x6e, 0x2e, 0x35, 0x9a, 0x25, 0x68, 0xf9, 0x80, 0x41, 0xba, 0x07, 0x28, 0xdd, 0x0d, 0x69, 0x81,
        0xe9, 0x7e, 0x7a, 0xec, 0x1d, 0x43, 0x60, 0xc2, 0x0a, 0x27, 0xaf, 0xcc, 0xfd, 0x9f, 0xae, 0x0b,
        0xf9, 0x1b, 0x65, 0xc5, 0x52, 0x47, 0x33, 0xab, 0x8f, 0x59, 0x3d, 0xab, 0xcd, 0x62, 0xb3, 0x57,
        0x16, 0x39, 0xd6, 0x24, 0xe6, 0x51, 0x52, 0xab, 0x8f, 0x53, 0x0c, 0x35, 0x9f, 0x08, 0x61, 0xd8,
        0x07, 0xca, 0x0d, 0xbf, 0x50, 0x0d, 0x6a, 0x61, 0x56, 0xa3, 0x8e, 0x08, 0x8a, 0x22, 0xb6, 0x5e,
        0x52, 0xbc, 0x51, 0x4d, 0x16, 0xcc, 0xf8, 0x06, 0x81, 0x8c, 0xe9, 0x1a, 0xb7, 0x79, 0x37, 0x36,
        0x5a, 0xf9, 0x0b, 0xbf, 0x74, 0xa3, 0x5b, 0xe6, 0xb4, 0x0b, 0x8e, 0xed, 0xf2, 0x78, 0x5e, 0x42,
        0x87, 0x4d};

    std::vector<uint8_t> key = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f};
    std::vector<uint32_t> nonce = {
        0x00000000, 0x4a000000, 0x00000000};

    // Initialize ChaCha20
    ChaCha20 chacha;
    chacha_new(&chacha, key.data(), reinterpret_cast<const uint32_t *>(nonce.data()), 1);
    chacha_encrypt(&chacha, plaintext.data(), ciphertext, plaintext.size());

    for (size_t i = 0; i < plaintext.size(); ++i)
    {
        EXPECT_EQ(ciphertext[i], expected_ciphertext[i]);
    }
}

int main(int argc, char **argv)
{
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}